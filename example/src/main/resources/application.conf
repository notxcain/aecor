http {
  interface = "0.0.0.0"
  port = 9000
}

cluster {
  system-name = "aecor-example"
  host = "127.0.0.1"
  port = 51000
}

split-brain-resolver {
  active-strategy = static-quorum
  stable-after = 3s
  static-quorum {
    quorum-size = 3
    role = ""
  }
}

cassandra-journal {
  contact-points = ["127.0.0.1"]
  keyspace = "aecor_example"
  table = "events"
  pubsub-minimum-interval = 1ms
}

cassandra-snapshot-store {
  contact-points = ["127.0.0.1"]
  keyspace = "aecor_example"
  table = "snapshots"
}

cassandra-query-journal {
  refresh-interval = 1s
  first-time-bucket = "20160612"
  delayed-event-timeout = 30s
  eventual-consistency-delay = 0
}

akka {
  loglevel = "debug"
  stdout-loglevel = "debug"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  remote {
    artery {
      enabled = on
      canonical.hostname = ${cluster.host}
      canonical.port = ${cluster.port}
      bind.hostname = "0.0.0.0"
      bind.port = ${cluster.port}
    }
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      canonical.hostname = ${cluster.host}
      canonical.port = ${cluster.port}
      bind.hostname = "0.0.0.0"
      bind.port = ${cluster.port}
    }
  }

  cluster {
    down-removal-margin = ${split-brain-resolver.stable-after}
    seed-nodes = [
      "akka://"${cluster.system-name}"@127.0.0.1:51000",
      "akka://"${cluster.system-name}"@127.0.0.1:51001",
      "akka://"${cluster.system-name}"@127.0.0.1:51002"
    ]
  }
}